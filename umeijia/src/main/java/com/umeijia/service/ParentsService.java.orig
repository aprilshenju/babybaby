package com.umeijia.service;

<<<<<<< HEAD
import com.umeijia.dao.ParentsDao;
import com.umeijia.dao.StudentDao;
import com.umeijia.util.GlobalStatus;
import com.umeijia.util.MD5;
import com.umeijia.vo.Parents;
import com.umeijia.vo.Student;
import net.sf.json.JSONException;
import net.sf.json.JSONObject;
=======
import java.util.Date;

import javax.ws.rs.*;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;

import com.umeijia.util.MD5;
import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
>>>>>>> 86c410b286f1c017a61355f96d6e24667e3a3889
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestBody;

<<<<<<< HEAD
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import java.util.Date;

=======
import com.umeijia.dao.ParentsDao;
import com.umeijia.vo.Parents;
>>>>>>> 86c410b286f1c017a61355f96d6e24667e3a3889

@Service
@Path("/parents_service")
public class ParentsService {
<<<<<<< HEAD
    @Autowired
    @Qualifier("parentsdao")
    private ParentsDao parentsdao;
    @Autowired
    @Qualifier("studentdao")
    private StudentDao studentdao;
    /***
     * 用户登录
     * curl -X POST -H "Content-Type:application/json" -d {"phone":"15608036304","password":"123456","email":""} http://127.0.0.1/umeijiaServer/parents_service/login
     * **/
    @Path("/login")
    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public String login(@RequestBody String userinfo, @Context HttpHeaders headers){
        JSONObject job = JSONObject.fromObject(userinfo);
        JSONObject job_out=new JSONObject();
        try {
           String phone=job.getString("phone");
           String email=job.getString("email");
           String pwd=job.getString("password");
           String pwd_md=MD5.GetSaltMD5Code(pwd);
            Parents p=null;
            if (!phone.isEmpty()) {
                p = parentsdao.loginCheckByPhone(phone,pwd_md);
            } else if(!email.isEmpty()){ // 邮箱登录
                p = parentsdao.loginCheckByEmail(email,pwd_md);
            }
            if(p!=null)
            {
                Student stu = p.getStudent();
                job_out.put("resultCode", GlobalStatus.succeed.toString());
                job_out.put("resultDesc","登陆成功");
                job_out.put("tkn",p.getToken());
                job_out.put("tkn_exptime",p.getExpire());
                job_out.put("p_id",p.getId());
                job_out.put("phone",p.getPhone_num());
                job_out.put("email",p.getEmail());
                job_out.put("name",p.getName());
                job_out.put("baby_id",stu.getId());
                job_out.put("class_id",p.getClass_id());
                job_out.put("relation",p.getRelationship());
                job_out.put("is_vip",stu.isVip());
                job_out.put("vip_start",stu.getVip_start());
                job_out.put("vip_end",stu.getVip_end());
                job_out.put("avatar",p.getAvatar_path());
                job_out.put("app_push",p.isAllow_app_push());
                job_out.put("wechat_push",p.isAllow_wechat_push());

            }else{
                job_out.put("resultCode", GlobalStatus.error.toString());
                job_out.put("resultDesc","登录用户名、邮箱或密码无效");
            }
        }catch (JSONException e){
              return "error";  //json  构造异常，直接返回error
       }
        return job_out.toString();
    }

    @Path("/correctPwd")
    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public String correctPwd(@RequestBody String userinfo, @Context HttpHeaders headers){
        JSONObject job = JSONObject.fromObject(userinfo);
        JSONObject job_out=new JSONObject();
        try {
            // 用户 登陆token 验证
            String tkn = headers.getRequestHeader("tkn").get(0);
            long tid = Long.parseLong( headers.getRequestHeader("id").get(0) );
            if(!parentsdao.verifyToken(tid,tkn)){ // token验证
                job_out.put("resultCode",GlobalStatus.error.toString());
                job_out.put("resultDesc","token已过期");
                return job_out.toString();
            }

            String phone=job.getString("phone");
            String oldPasswordMD=MD5.GetSaltMD5Code(job.getString("oldPassword"));
            String newPasswordMD=MD5.GetSaltMD5Code(job.getString("newPassword"));
            Parents p=parentsdao.queryParents(phone);

            if(p!=null && newPasswordMD.equals(p.getPwd_md()))
            {
                p.setPwd_md(newPasswordMD);
                p.setToken(MD5.GetSaltMD5Code(newPasswordMD+new Date().toString())); //token重置
                if(parentsdao.updateParents(p)){
                    job_out.put("resultCode", GlobalStatus.succeed.toString());
                    job_out.put("resultDesc","成功修改密码");
                    return  job_out.toString(); //成功
                }
            }
                job_out.put("resultCode", GlobalStatus.error.toString());
                job_out.put("resultDesc","修改密码失败");
        }catch (JSONException e){
            return "error";  //json  构造异常，直接返回error
        }
        return job_out.toString();
    }

    @Path("/correctPInfo")
    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public String correctPInfo(@RequestBody String userinfo, @Context HttpHeaders headers){
        JSONObject job = JSONObject.fromObject(userinfo);
        JSONObject job_out=new JSONObject();
        try {
            // 用户 登陆token 验证
            String tkn = headers.getRequestHeader("tkn").get(0);
            long tid = Long.parseLong( headers.getRequestHeader("id").get(0) );
            if(!parentsdao.verifyToken(tid,tkn)){ // token验证
                job_out.put("resultCode",GlobalStatus.error.toString());
                job_out.put("resultDesc","token已过期");
                return job_out.toString();
            }

            String phone=job.getString("phone");
            String name=job.getString("name");
            boolean app_push=job.getBoolean("app_push");
            boolean wechat_push=job.getBoolean("wechat_push");

            Parents p=parentsdao.queryParents(phone);

            if(p!=null)
            {
                p.setName(name);
                p.setAllow_app_push(app_push);
                p.setAllow_wechat_push(wechat_push);
                if(parentsdao.updateParents(p)){
                    job_out.put("resultCode", GlobalStatus.succeed.toString());
                    job_out.put("resultDesc","成功修改信息");
                    return  job_out.toString(); //成功
                }
            }
            job_out.put("resultCode", GlobalStatus.error.toString());
            job_out.put("resultDesc","修改信息失败");
        }catch (JSONException e){
            return "error";  //json  构造异常，直接返回error
        }
        return job_out.toString();
    }
=======
    static Logger logger = Logger.getLogger("info");
    @Autowired
    @Qualifier("parentsdao")
    private ParentsDao parentsdao;
    public ParentsService() {

    }
    public ParentsDao getParentsdao() {
        return parentsdao;
    }
    public void setParentsdao(ParentsDao parentsdao) {
        this.parentsdao = parentsdao;
    }


    /**
     * 测试get
     * @return
     */
    @Path("/hello")
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String test(){

        return "welcom to umeijia";
    }


    /***
     * 添加用户
     * curl -X POST -H "Content-Type:application/json" -d {"phoneNum":"15208207369","password":"123456","name":"jalsary","gender":1,"email":"635313831@qq.com"} http://127.0.0.1/umeijiaServer/parents_service/add
     * **/
    @Path("/add")
    @POST
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public String addRequest(@RequestBody String userinfo,@Context HttpHeaders headers){
        //
//			String tkn = headers.getRequestHeader("tkn").get(0);
//			String uid = headers.getRequestHeader("uid").get(0);
        JSONObject job =JSONObject.fromObject(userinfo);
        JSONObject job_out=new JSONObject();
        //logger.info(tkn+"-----"+uid);
//			if (checkLogin(uid, tkn)==false) { /* not login */	
//				job_out.put("msg",GlobalStatus.error.toString());
//				return job_out.toString();
//			}
        Parents parents = new Parents();
        parents.setPhone_num(job.getString("phoneNum"));
        parents.setPwd_md(job.getString("password"));
        parents.setName(job.getString("name"));
        parents.setGender(job.getInt("gender"));
        parents.setRegist_date(new Date());
        parents.setEmail(job.getString("email"));
        if(parentsdao.addParents(parents)){
            job_out.put("resultCode","0000");
            job_out.put("resultDesc","添加成功");
        }
        else{
            job_out.put("resultCode","0001");
            job_out.put("resultDesc","添加失败");
        }
>>>>>>> 86c410b286f1c017a61355f96d6e24667e3a3889

        return job_out.toString();
    }

    public boolean checkLogin(String uid, String tkn){
        return true;
    }
}
